<ProjectRules>
- Use pnpm for package management
- when running shadcn commands, use "shadcn"
- the db can be accessed context.cloudflare.env.DB, the db is SQLite and using Cloudflare R2, Use the drizzle orm to write queries.
- check ~/schemas/models.ts for the zod schemas and types to use before creating new ones
- whenever you see "@remix-run/cloudflare", use "@react-router/cloudflare" instead
- whenever you see "@remix-run/node", use "@react-router/cloudflare" instead
- whenever you see "@remix-run/react", use "react-router" instead
- whenever you are installing a new package, use "pnpm add" instead of "npm install" and use "@latest"
- when styling components, use a brutalist style. No rounded edges
- always reference the <AllowedPackages> section when adding a new package
</ProjectRules>

<AllowedPackages>
  # Main Dependencies
  "@conform-to/react" # Form validation and handling for React
  "@conform-to/zod" # Zod integration for Conform
  "@radix-ui/react-dialog" # Dialog primitive component
  "@radix-ui/react-icons" # Beautiful hand-crafted icons
  "@radix-ui/react-label" # Label primitive component
  "@radix-ui/react-popover" # Popover primitive component
  "@radix-ui/react-scroll-area" # Scroll area primitive component
  "@radix-ui/react-select" # Select primitive component
  "@radix-ui/react-separator" # Separator primitive component
  "@radix-ui/react-slot" # Slot primitive component
  "@react-router/cloudflare" # React Router for Cloudflare Workers
  "bcryptjs" # Password hashing library
  "class-variance-authority" # Create style variants with tailwind classes
  "clsx" # Utility for constructing className strings
  "cmdk" # Command menu component
  "drizzle-orm" # Modern TypeScript ORM
  "isbot" # Utility to detect bots
  "lucide-react" # Beautiful icon set
  "react" # Core React library
  "react-dom" # React DOM renderer
  "react-router" # React routing library
  "tailwind-merge" # Merge tailwind classes
  "tailwindcss-animate" # Animation utilities for Tailwind
  "use-debounce" # Debounce hook utility
  "uuid" # UUID generation
  "zod" # Schema validation

  # Dev Dependencies
  "@cloudflare/workers-types" # Cloudflare Workers types
  "@eslint/eslintrc" # ESLint configuration
  "@eslint/js" # ESLint JavaScript support
  "@ianvs/prettier-plugin-sort-imports" # Import sorting for Prettier
  "@react-router/dev" # React Router dev tools
  "@types/react" # React TypeScript types
  "@types/react-dom" # React DOM TypeScript types
  "@typescript-eslint/eslint-plugin" # TypeScript ESLint plugin
  "@typescript-eslint/parser" # TypeScript ESLint parser
  "autoprefixer" # CSS autoprefixer
  "better-sqlite3" # SQLite library only used for drizzle studio, do not use this anywhere else
  "dotenv" # Environment variable management
  "drizzle-kit" # Drizzle ORM toolkit
  "eslint" # Linting utility
  "eslint-config-prettier" # Prettier ESLint config
  "eslint-import-resolver-typescript" # TypeScript import resolver
  "eslint-plugin-import" # ESLint import rules
  "eslint-plugin-jsx-a11y" # Accessibility linting
  "eslint-plugin-react" # React linting rules
  "eslint-plugin-react-hooks" # React hooks linting
  "husky" # Git hooks
  "lint-staged" # Staged files linting
  "postcss" # CSS post-processor
  "prettier" # Code formatter
  "prettier-plugin-tailwindcss" # Tailwind CSS Prettier plugin
  "shadcn-ui" # UI component library
  "tailwindcss" # Utility-first CSS framework
  "typescript" # TypeScript language
  "vite" # Build tool and dev server
  "vite-tsconfig-paths" # TypeScript path resolution
  "wrangler" # Cloudflare Workers CLI
</AllowedPackages>

<Database>
# Database Schema Relations

tables:
users:
primary: id (text)
unique: email
auth_fields: - hashedPassword - passwordSalt - passwordResetToken - passwordResetExpires
relations: - workouts (one-to-many) - results (one-to-many)

movements:
primary: id (text)
key_fields: - name - type: ["strength", "gymnastic", "monostructural"]
relations: - workouts (many-to-many via workout_movements) - strengthResults (one-to-many) - monostructuralResults (one-to-many)

workouts:
primary: id (text)
key_fields: - name - description - scheme: [
"time",
"time-with-cap",
"pass-fail",
"rounds-reps",
"reps",
"emom",
"load",
"calories",
"meters",
"feet",
"points"
]
optional_fields: - repsPerRound - roundsToScore - tiebreakScheme: ["time", "reps"] - secondaryScheme
relations: - users (many-to-one) - movements (many-to-many via workout_movements) - wodResults (one-to-many)

results:
type: base table
primary: id (text)
required_fields: - userId - date - type - notes (optional)
subtypes:
wodResults:
additional_fields: - workoutId - scale: ["rx", "scaled", "rx+"]
relations: - wodSets (one-to-many)

      strengthResults:
        additional_fields:
          - movementId
          - setCount
        relations:
          - strengthSets (one-to-many)

      monostructuralResults:
        additional_fields:
          - movementId
          - distance
          - time
        relations:
          - monostructuralSets (one-to-many)

sets:
wodSets:
primary: id (text)
fields: - resultId - score - setNumber

    strengthSets:
      primary: id (text)
      fields:
        - resultId
        - setNumber
        - reps
        - status: ["pass", "fail"]
        - weight

    monostructuralSets:
      primary: id (text)
      fields:
        - resultId
        - setNumber
        - distance
        - time

common_queries:
user_workouts:
tables: [users, workouts]
join: users.id = workouts.userId

workout_movements:
tables: [workouts, workout_movements, movements]
joins: - workouts.id = workout_movements.workoutId - movements.id = workout_movements.movementId

user_results:
tables: [users, results]
join: users.id = results.userId
subtables: - wodResults - strengthResults - monostructuralResults

result_sets:
pattern: "{result_type}Results JOIN {result_type}Sets"
examples: - wodResults JOIN wodSets - strengthResults JOIN strengthSets - monostructuralResults JOIN monostructuralSets
</Database>
